<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lsc的小站</title>
  
  <subtitle>梅花香自苦寒来</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-14T02:02:28.439Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lsc2001</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Bilibili动态网页的爬取</title>
    <link href="http://yoursite.com/2020/04/13/Bilibili%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%9A%84%E7%88%AC%E5%8F%96/"/>
    <id>http://yoursite.com/2020/04/13/Bilibili%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%9A%84%E7%88%AC%E5%8F%96/</id>
    <published>2020-04-13T12:39:47.000Z</published>
    <updated>2020-04-14T02:02:28.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bilibili动态网页的爬取（一）评论篇"><a href="#Bilibili动态网页的爬取（一）评论篇" class="headerlink" title="Bilibili动态网页的爬取（一）评论篇"></a><center>Bilibili动态网页的爬取（一）评论篇</center></h1><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识:"></a>预备知识:</h3><ul><li>python语言基础</li><li>python requests库, Bs4库, json库, 以及正则表达式(regex)的使用</li><li>HTML/CSS和Jquery的基本知识</li></ul><h3 id="动态网页简介"><a href="#动态网页简介" class="headerlink" title="动态网页简介"></a>动态网页简介</h3><p>​&nbsp;&nbsp;&nbsp;&nbsp;不同于一般的静态网页（我们可以通过直接爬取HTML代码获取想要的信息），Bilibili采取的是通过发送Jquery请求，然后由JS动态生成网页。而事实上，现在越来越多的网页都采用这种方式获取信息，好处是显而易见的，页面的信息可以由服务端自动生成，大大减少了维护量，同时由于网页的信息难以直接获取，也有效组织了爬虫和黑客的攻击<del>（加大了我们操作的难度）</del>。</p><h3 id="为什么是Bilibili"><a href="#为什么是Bilibili" class="headerlink" title="为什么是Bilibili"></a>为什么是Bilibili</h3><p><del>因为Bilibili基本没有设置反爬，方便我们锻炼爬取动态网页的能力</del> 因为我喜欢Bilibili啊(￣▽￣)”</p><h3 id="正式开始（评论）"><a href="#正式开始（评论）" class="headerlink" title="正式开始（评论）"></a>正式开始（评论）</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;首先我们要知道这么一个基本事实：B站在请求弹幕信息时使用的oid=cid（我也不知道是什么），在请求评论信息时使用的oid=aid（也就是av号），大概这也是B站为什么要把av号全部换成bv号吧<del>（然并卵）</del>。<br>接着就可以开始操作了。首先打开av170001，按照惯例F12（右击，检查元素），选择Network选项卡，选择下方的JS，像这样：<br><img src="/" class="lazyload" data-src="/img/Bilibili/1.jpg"  alt=""><br>紧接着我们自由切换底下的页数<br><img src="/" class="lazyload" data-src="/img/Bilibili/2.jpg"  alt=""><br>发现检查页发生了变化，点这个(到处点）：<br><img src="/" class="lazyload" data-src="/img/Bilibili/3.jpg"  alt=""><br>发现下面有了这个：<br><img src="/" class="lazyload" data-src="/img/Bilibili/4.jpg"  alt=""><br>拖到底下，看这个：<br><img src="/" class="lazyload" data-src="/img/Bilibili/5.jpg"  alt=""><br>这里列出了几项数据，重要的只有这几项:</p><ul><li><p>type（照抄，不知道是什么）</p></li><li><p>pn（评论的第几页）</p></li><li><p>oid（aid）</p></li><li><p>sort（照抄，不知道是什么）</p></li></ul><p>来到顶部，看到这一串东西:<br>  <img src="/" class="lazyload" data-src="/img/Bilibili/6.jpg"  alt=""></p><p>我们可以无视后面的jQuery请求，只提取重要的部分（后面的都是请求时自动生成的）：</p><p>格式是：<code>api.bilibili/x/v2/reply?pn=xxx&amp;type=xxx&amp;oid=xxx&amp;sort=xxx</code></p><p>我们只需要把上面得到的数据填进去就可以了。</p><p>我们访问这个页面，不出所料，返回的是一个json格式的页面。（然后你就懂了）</p><p>问题来了，如果给的是bv号，如何得到av号？方法一：百度得到av和bv转换的算法。方法二（更优）：考虑到为以后获取弹幕做准备，我们还需要得到cid（至少我没找到算cid的方法），可以直接请求<code>bilibili.com/video/av170001</code>得到网页，一番瞎眼查看后发现，只需要用正则表达式匹配出<code>\&quot;cid=\d+&amp;aid=\d+&amp;attribute=\d+&amp;bvid=\w+&amp;</code>这样一个字符串即可（然后你就又懂了）</p><h3 id="附上部分代码："><a href="#附上部分代码：" class="headerlink" title="附上部分代码："></a>附上部分代码：</h3><p>提取id:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoId</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        self.aid = <span class="string">""</span></span><br><span class="line">        self.bvid = <span class="string">""</span></span><br><span class="line">        self.cid = <span class="string">""</span></span><br><span class="line">        self.processInput(s)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            hd = &#123;<span class="string">'user-agent'</span>: <span class="string">'Chrome/80.0'</span>&#125;</span><br><span class="line">            r = requests.get(url, headers=hd, timeout=<span class="number">20</span>)</span><br><span class="line">            r.raise_for_status()</span><br><span class="line">            r.encoding = <span class="string">'utf-8'</span></span><br><span class="line">            self.getId(r.text)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">"Error raised when try to connect!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getId</span><span class="params">(self, html)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            match = re.search(<span class="string">r'\"cid=\d+&amp;aid=\d+&amp;attribute=\d+&amp;bvid=\w+&amp;'</span>, html)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> match:</span><br><span class="line">                <span class="keyword">raise</span> ValueError</span><br><span class="line">            self.cid = re.search(<span class="string">r'cid=\d+'</span>, match.group(<span class="number">0</span>)).group(<span class="number">0</span>)[<span class="number">4</span>:]</span><br><span class="line">            self.aid = re.search(<span class="string">r'aid=\d+'</span>, match.group(<span class="number">0</span>)).group(<span class="number">0</span>)[<span class="number">4</span>:]</span><br><span class="line">            self.bvid = re.search(<span class="string">r'bvid=\w+'</span>, match.group(<span class="number">0</span>)).group(<span class="number">0</span>)[<span class="number">5</span>:]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">"Error raised when parse the html page!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">processInput</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            s = s[:<span class="number">2</span>].lower() + s[<span class="number">2</span>:]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> re.match(<span class="string">r'^av\d+$'</span>, s) <span class="keyword">and</span> <span class="keyword">not</span> re.match(<span class="string">r'^bv\w+$'</span>, s):</span><br><span class="line">                <span class="keyword">raise</span> ValueError</span><br><span class="line">            url = <span class="string">"https://www.bilibili.com/video/"</span> + s</span><br><span class="line">            self.getHTMLText(url)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">"Error raised because of wrong input!"</span>)</span><br></pre></td></tr></table></figure><p>解析评论json:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseCM</span><span class="params">(jsonText, comments)</span>:</span></span><br><span class="line">    cmdict = json.loads(jsonText)</span><br><span class="line">    data = cmdict[<span class="string">'data'</span>]</span><br><span class="line">    <span class="keyword">for</span> cm <span class="keyword">in</span> data[<span class="string">'replies'</span>]:</span><br><span class="line">        comments.append(cm[<span class="string">'content'</span>][<span class="string">'message'</span>])</span><br></pre></td></tr></table></figure><p>喜欢我的不妨继续关注哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦！ヾ(≧▽≦*)o</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Bilibili动态网页的爬取（一）评论篇&quot;&gt;&lt;a href=&quot;#Bilibili动态网页的爬取（一）评论篇&quot; class=&quot;headerlink&quot; title=&quot;Bilibili动态网页的爬取（一）评论篇&quot;&gt;&lt;/a&gt;&lt;center&gt;Bilibili动态网页的爬取
      
    
    </summary>
    
    
      <category term="IT" scheme="http://yoursite.com/categories/IT/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="网络爬虫" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
</feed>
